<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>{{ mode == 'signup' ? 'Sign Up' : 'Login' }} | Ticket Manager Pro</title>
  
  
  <link rel="icon" href="/assets/icons/TicketLogo.svg" type="image/svg+xml">
  <link rel="shortcut icon" href="/assets/icons/TicketLogo.svg" type="image/svg+xml">

  <link href="/assets/css/tailwind.css" rel="stylesheet">
  <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
</head>
<body class="bg-gradient-to-br from-indigo-50 via-white to-purple-50 min-h-screen flex items-center justify-center p-4">

  <div x-data="authForm('{{ mode }}', '{{ redirect }}')" class="w-full max-w-md mx-auto p-8 bg-white shadow-lg rounded-2xl">
    <h2 class="text-2xl font-bold text-center mb-6 text-indigo-600">
      {{ mode == 'signup' ? 'Create Account' : 'Welcome Back' }}
    </h2>

    <form @submit.prevent="submit" class="space-y-5">

      <!-- Full Name — ONLY IN SIGNUP -->
      <template x-if="isSignup">
        <div>
          <label for="name-field" class="block text-sm font-medium text-gray-700 mb-1">
            Full Name <span class="text-red-500" aria-label="required">*</span>
          </label>
          <input 
            id="name-field"
            name="name"
            x-model="form.name" 
            @input="validateName"
            type="text" 
            placeholder="John Doe"
            required
            class="w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-indigo-500 transition"
            :class="errors.name ? 'border-red-500' : 'border-gray-300'"
            aria-describedby="name-error"
            aria-required="true"
          />
          <p id="name-error" x-show="errors.name" x-text="errors.name" class="text-red-500 text-xs mt-1"></p>
        </div>
      </template>

      <div>
        <label for="email-field" class="block text-sm font-medium text-gray-700 mb-1">
          Email <span class="text-red-500" aria-label="required">*</span>
        </label>
        <input 
          id="email-field"
          name="email"
          x-model="form.email" 
          @input="validateEmail"
          type="email" 
          placeholder="you@example.com"
          required
          class="w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-indigo-500 transition"
          :class="errors.email ? 'border-red-500' : 'border-gray-300'"
          aria-describedby="email-error"
          aria-required="true"
        />
        <p id="email-error" x-show="errors.email" x-text="errors.email" class="text-red-500 text-xs mt-1"></p>
      </div>

      <!-- Password — ALWAYS -->
      <div>
        <label for="password-field" class="block text-sm font-medium text-gray-700 mb-1">
          Password <span class="text-red-500" aria-label="required">*</span>
        </label>
        <input 
          id="password-field"
          name="password"
          x-model="form.password" 
          @input="validatePassword"
          type="password" 
          placeholder="••••••••"
          required
          class="w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-indigo-500 transition"
          :class="errors.password ? 'border-red-500' : 'border-gray-300'"
          aria-describedby="password-error"
          aria-required="true"
        />
        <p id="password-error" x-show="errors.password" x-text="errors.password" class="text-red-500 text-xs mt-1"></p>
      </div>

      <button 
        type="submit" 
        :disabled="loading || !isFormValid"
        class="w-full py-3 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition"
        aria-label="{{ isSignup ? 'Sign Up' : 'Login' }}"
      >
        <span x-show="!loading" x-text="isSignup ? 'Sign Up' : 'Login'"></span>
        <span x-show="loading">Please wait...</span>
      </button>
    </form>

    <p class="text-center mt-6 text-sm text-gray-600">
      <template x-if="isSignup">
        <span>
          Have an account? 
          <a href="/auth?mode=login" class="text-indigo-600 hover:underline font-medium">Login</a>
        </span>
      </template>
      <template x-if="!isSignup">
        <span>
          Don't have an account? 
          <a href="/auth?mode=signup" class="text-indigo-600 hover:underline font-medium">Sign Up</a>
        </span>
      </template>
    </p>
  </div>

  
  <script>
    function authForm(mode, redirect) {
      return {
        mode,
        redirect: redirect || '/dashboard.php',
        isSignup: mode === 'signup',
        form: { name: '', email: '', password: '' },
        errors: { name: '', email: '', password: '' },
        loading: false,

        // VALIDATION
        validateName() {
          this.errors.name = this.form.name.trim().length < 2 ? 'Name too short' : '';
        },

        validateEmail() {
          const email = this.form.email.trim();
          if (!email) {
            this.errors.email = 'Email required';
          } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
            this.errors.email = 'Invalid email';
          } else {
            this.errors.email = '';
            if (this.isSignup) {
              const users = JSON.parse(localStorage.getItem('users') || '[]');
              if (users.some(u => u.email === email)) {
                this.errors.email = 'Email already exists';
              }
            }
          }
        },

        validatePassword() {
          this.errors.password = this.form.password.length < 6 ? 'Password must be 6+ chars' : '';
        },

        // COMPUTED: FORM VALIDITY
        get isFormValid() {
          if (this.isSignup) {
            return this.form.name.trim() && 
              this.form.email.trim() && 
              this.form.password && 
              !this.errors.name && 
              !this.errors.email && 
              !this.errors.password;
          }
          return this.form.email.trim() && 
            this.form.password && 
            !this.errors.email && 
            !this.errors.password;
        },

        // SUBMIT
        async submit() {
          if (!this.isFormValid) return;

          this.loading = true;

          
          await new Promise(r => setTimeout(r, 600));

          let users = JSON.parse(localStorage.getItem('users') || '[]');

          if (this.isSignup) {
            // SIGNUP
            const newUser = {
              id: Date.now(),
              name: this.form.name.trim(),
              email: this.form.email.trim(),
              password: this.form.password
            };
            users.push(newUser);
            localStorage.setItem('users', JSON.stringify(users));

            const session = { userId: newUser.id };
            localStorage.setItem('ticketapp_session', JSON.stringify(session));

            Toastify({ 
              text: "Account created!", 
              style: { background: "#10b981" } 
            }).showToast();

            setTimeout(() => window.location.href = this.redirect, 1500);

          } else {
            // LOGIN
            const user = users.find(u => 
              u.email === this.form.email.trim() && 
              u.password === this.form.password
            );

            if (!user) {
              Toastify({ 
                text: "Invalid email or password!", 
                style: { background: "#ef4444" } 
              }).showToast();
              this.loading = false;
              return;
            }

            const session = { userId: user.id };
            localStorage.setItem('ticketapp_session', JSON.stringify(session));

            Toastify({ 
              text: `Welcome back, ${user.name}!`, 
              style: { background: "#10b981" } 
            }).showToast();

            setTimeout(() => window.location.href = this.redirect, 1500);
          }
        }
      };
    }
  </script>
</body>
</html>