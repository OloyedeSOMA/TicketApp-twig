<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tickets | Ticket Manager Pro</title>
  
  <link rel="icon" href="/favicon.svg" type="image/svg+xml">


  <script src="https://cdn.tailwindcss.com"></script>
  <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
</head>
<body class="min-h-screen bg-gray-50" x-data="app" x-init="init">

  <!-- HEADER -->
  {% include 'partials/header.html.twig' %}

  <!-- MAIN -->
  <main class="p-4 sm:p-6 space-y-6 max-w-7xl mx-auto" x-show="Alpine.store('auth').user">
    
    <!-- TITLE + BUTTON -->
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 gap-4">
      <div>
        <h2 class="text-2xl font-bold text-gray-900">Tickets</h2>
        <p class="text-gray-600">Manage and track all your support tickets</p>
      </div>
      <button @click="openModal('create')" 
              class="px-4 py-2 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 flex items-center gap-2">
        + Create New Ticket
      </button>
    </div>

    <!-- TICKET GRID -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <template x-if="tickets.length === 0">
        <p class="text-gray-500 col-span-2 text-center py-8">No tickets yet. Create one!</p>
      </template>

      <template x-for="ticket in tickets" :key="ticket.id">
        <article class="bg-white p-6 rounded-2xl shadow-sm hover:shadow transition-shadow">
          <div class="flex items-center justify-between mb-3">
            <span :class="statusClass(ticket.status)" 
                  class="px-3 py-1 rounded-full text-xs font-medium">
              <span x-text="ticket.status"></span>
            </span>
            <span :class="priorityClass(ticket.priority)" 
                  class="text-xs font-medium">
              <span x-text="ticket.priority"></span>
            </span>
          </div>
          <h3 class="font-semibold text-gray-900 mb-1" x-text="ticket.title"></h3>
          <p class="text-sm text-gray-600 mb-4" x-text="ticket.description"></p>
          <div class="flex gap-2">
            <button @click="openModal('edit', ticket)"
                    class="px-3 py-1 bg-indigo-50 text-indigo-600 rounded-lg text-sm hover:bg-indigo-100">
              Edit
            </button>
            <button @click="openModal('delete', ticket)"
                    class="px-3 py-1 bg-red-50 text-red-600 rounded-lg text-sm hover:bg-red-100">
              Delete
            </button>
          </div>
        </article>
      </template>
    </div>
  </main>

  <!-- MODAL -->
  <div x-show="modal.isOpen" 
       class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"
       x-transition>
    <div class="bg-white rounded-2xl shadow-xl max-w-md w-full p-6">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-xl font-bold text-gray-900" x-text="modalTitle"></h2>
        <button @click="closeModal" class="text-gray-400 hover:text-gray-600" aria-label="Close modal">X</button>
      </div>

      <!-- DELETE MODE -->
      <template x-if="modal.mode === 'delete'">
        <div>
          <p class="text-gray-700 mb-6">Are you sure you want to delete this ticket? This action cannot be undone.</p>
          <div class="flex gap-3 justify-end">
            <button @click="closeModal" class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">
              Cancel
            </button>
            <button @click="saveTicket" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">
              Delete
            </button>
          </div>
        </div>
      </template>

      <!-- FORM MODE -->
      <template x-if="modal.mode !== 'delete'">
        <form @submit.prevent="saveTicket" class="space-y-4">
          <div>
            <label for="ticket-title" class="block text-sm font-medium text-gray-700 mb-1">
              Title <span class="text-red-500" aria-label="required">*</span>
            </label>
            <input 
              id="ticket-title" 
              name="title" 
              type="text" 
              x-model="form.title" 
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
              placeholder="Enter ticket title"
              aria-required="true">
          </div>

          <div>
            <label for="ticket-desc" class="block text-sm font-medium text-gray-700 mb-1">
              Description
            </label>
            <textarea 
              id="ticket-desc" 
              name="description" 
              x-model="form.description" 
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 resize-none"
              placeholder="Describe the issue or request"></textarea>
          </div>

          <div class="grid grid-cols-2 gap-4">
            <div>
              <label for="ticket-status" class="block text-sm font-medium text-gray-700 mb-1">
                Status <span class="text-red-500" aria-label="required">*</span>
              </label>
              <select 
                id="ticket-status" 
                name="status" 
                x-model="form.status"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                aria-required="true">
                <option>Open</option>
                <option>In Progress</option>
                <option>Closed</option>
              </select>
            </div>
            <div>
              <label for="ticket-priority" class="block text-sm font-medium text-gray-700 mb-1">
                Priority
              </label>
              <select 
                id="ticket-priority" 
                name="priority" 
                x-model="form.priority"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                <option>High Priority</option>
                <option>Medium Priority</option>
                <option>Low Priority</option>
              </select>
            </div>
          </div>

          <div class="flex gap-3 justify-end mt-6">
            <button type="button" @click="closeModal" 
                    class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">
              Cancel
            </button>
            <button type="submit" 
                    class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
                    x-text="modal.mode === 'create' ? 'Create Ticket' : 'Update Ticket'">
            </button>
          </div>
        </form>
      </template>
    </div>
  </div>

  <!-- AUTH STORE + TICKETS LOGIC -->
  <script>
    document.addEventListener('alpine:init', () => {
      // AUTH STORE
      const auth = {
        user: null,

        init() {
          this.checkLogin();
        },

        checkLogin() {
          const session = localStorage.getItem('ticketapp_session');
          if (!session) return this.redirectToLogin();
          
          const { userId } = JSON.parse(session);
          const users = JSON.parse(localStorage.getItem('users') || '[]');
          this.user = users.find(u => u.id === userId);
          
          if (!this.user) return this.redirectToLogin();
        },

        redirectToLogin() {
          const current = window.location.pathname;
          const redirect = current !== '/auth' ? `?redirect=${encodeURIComponent(current)}` : '';
          window.location.href = `/auth?mode=login${redirect}`;
        },

        logout() {
          localStorage.removeItem('ticketapp_session');
          this.redirectToLogin();
        },

        isActive(path) {
          return window.location.pathname === path;
        }
      };

      Alpine.store('auth', auth);

      // TICKETS LOGIC
      Alpine.data('app', () => ({
        tickets: [],
        modal: { isOpen: false, mode: 'create', ticket: null },
        form: { title: '', description: '', status: 'Open', priority: 'Medium Priority' },
        modalTitle: 'Create New Ticket',

        init() {
          this.$nextTick(() => {
            Alpine.store('auth').init();
            this.loadTickets();
          });
        },

        loadTickets() {
          const data = localStorage.getItem('tickets');
          this.tickets = data ? JSON.parse(data) : [];
        },

        openModal(mode, ticket = null) {
          this.modal = { isOpen: true, mode, ticket };
          this.modalTitle = mode === 'create' ? 'Create New Ticket' : 
                           mode === 'edit' ? 'Edit Ticket' : 'Delete Ticket';

          if (mode === 'edit' && ticket) {
            this.form = { ...ticket };
          } else {
            this.form = { title: '', description: '', status: 'Open', priority: 'Medium Priority' };
          }
        },

        closeModal() {
          this.modal.isOpen = false;
        },

        saveTicket() {
          if (this.modal.mode === 'create') {
            const newTicket = { id: Date.now(), ...this.form };
            this.tickets.push(newTicket);
            this.showToast('Ticket added successfully');
          } else if (this.modal.mode === 'edit') {
            const index = this.tickets.findIndex(t => t.id === this.modal.ticket.id);
            this.tickets[index] = { ...this.tickets[index], ...this.form };
            this.showToast('Ticket updated successfully');
          } else if (this.modal.mode === 'delete') {
            this.tickets = this.tickets.filter(t => t.id !== this.modal.ticket.id);
            this.showToast('Ticket deleted successfully');
          }

          localStorage.setItem('tickets', JSON.stringify(this.tickets));
          this.closeModal();
        },

        statusClass(status) {
          const map = { 'Open': 'bg-green-100 text-green-700', 'In Progress': 'bg-yellow-100 text-yellow-700', 'Closed': 'bg-gray-100 text-gray-700' };
          return map[status] || 'bg-gray-100 text-gray-700';
        },

        priorityClass(priority) {
          const map = { 'High Priority': 'text-red-600', 'Medium Priority': 'text-yellow-600', 'Low Priority': 'text-green-600' };
          return map[priority] || 'text-gray-600';
        },

        showToast(msg) {
          Toastify({
            text: msg,
            duration: 3000,
            gravity: "top",
            position: "right",
            style: { background: "#6366f1" }
          }).showToast();
        }
      }));
    });
  </script>
</body>
</html>